import sqlite3 # Used for running the SQL script
import openpyxl # Used for creating the XLSX file
from openpyxl.comments import Comment # Used for saving metadata about each field
import json # Used to generate metadata for comment text
import os, platform # Used for opening the generated XLSX file

# Output options
LOG_TABLE_NAMES = True
LOG_RECORDS = True
LOG_FIELDS = True

OPEN_FILE = True

INPUT_FILE = "datasets_complicated/sample.sql"
OUTPUT_FILE = "datasets_complicated/sample.xlsx"

COMMENT_PREFIX = "AUTOGENERATED, DO NOT EDIT!\n" # Must be kept identical with COMMENT_PREFIX in the other script

# Logging functions
def log_table_name(text):
  if LOG_TABLE_NAMES: print(text)
def log_record(text):
  if LOG_RECORDS: print(text)
def log_field(text):
  if LOG_FIELDS: print(text)

with open(INPUT_FILE, 'r') as f:
  sql_script = f.read()

# Create a database connection in memory, to hold the tables generated by the script
conn = sqlite3.connect(":memory:")
cur = conn.cursor()

# Execute the script
cur.executescript(sql_script)

# Print out the names of the tables in the database
tables = list(cur.execute("SELECT name FROM sqlite_master WHERE type='table'"))

# Create a sample workbook
workbook = openpyxl.Workbook()
workbook.remove(workbook.active) # Remove the default worksheet

# Create a worksheet for each table
for table in tables:
  table_name = table[0]
  log_table_name(f"Creating worksheet for table: {table_name}")
  worksheet = workbook.create_sheet(table_name)

  # Create header line
  fields = cur.execute(f"PRAGMA table_info('{table_name}')")
  for i, field in enumerate(fields):
    log_field(f"Field {i}: {field[1]}, type: {field[2]}, not null: {field[3]}, pk: {field[5]}")
    
    # Write header into table
    cell = worksheet.cell(row=1, column=i+1) # OpenPyXl uses 1-based indexing!
    cell.value = field[1]

    # Prepare header metadata
    metadata = {"type": field[2], "not_null": bool(field[3]), "pk": int(field[5])}
    metadata_string = COMMENT_PREFIX + json.dumps(metadata)
    cell.comment = Comment(metadata_string, "AUTOGENERATED, DO NOT EDIT!")

  cur.execute(f"SELECT * FROM '{table_name}'")
  for i, row in enumerate(cur.fetchall()):
    for j, col in enumerate(row):
      cell = worksheet.cell(row=i+2, column=j+1) # OpenPyXl uses 1-based indexing!
      cell.value = col

    log_record(f"Table {table_name}: {col}")

workbook.save(OUTPUT_FILE)

# Open the created workbook
if OPEN_FILE:
  if platform.system() == "Windows":
    os.startfile(OUTPUT_FILE)
  else:
    os.system(f"open {OUTPUT_FILE}")